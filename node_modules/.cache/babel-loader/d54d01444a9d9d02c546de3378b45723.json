{"ast":null,"code":"import _asyncToGenerator from \"/Users/visheshgoyal/Desktop/Eternal/eternalwebapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, { PassThrough, pipeline as pump } from 'node:stream';\nimport { Buffer } from 'node:buffer';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream, clone } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nimport { FormData } from 'formdata-polyfill/esm.min.js';\nimport { isDomainOrSubdomain, isSameProtocol } from './utils/is.js';\nimport { parseReferrerPolicyFromHeader } from './utils/referrer.js';\nimport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom } from 'fetch-blob/from.js';\nexport { FormData, Headers, Request, Response, FetchError, AbortError, isRedirect };\nexport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom };\nvar supportedSchemas = new Set(['data:', 'http:', 'https:']);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\n\nexport default function fetch(_x, _x2) {\n  return _fetch.apply(this, arguments);\n}\n\nfunction _fetch() {\n  _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, options_) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // Build request object\n              var request = new Request(url, options_);\n\n              var _getNodeRequestOption = getNodeRequestOptions(request),\n                  parsedURL = _getNodeRequestOption.parsedURL,\n                  options = _getNodeRequestOption.options;\n\n              if (!supportedSchemas.has(parsedURL.protocol)) {\n                throw new TypeError(\"node-fetch cannot load \".concat(url, \". URL scheme \\\"\").concat(parsedURL.protocol.replace(/:$/, ''), \"\\\" is not supported.\"));\n              }\n\n              if (parsedURL.protocol === 'data:') {\n                var data = dataUriToBuffer(request.url);\n\n                var _response = new Response(data, {\n                  headers: {\n                    'Content-Type': data.typeFull\n                  }\n                });\n\n                resolve(_response);\n                return;\n              } // Wrap http.request into fetch\n\n\n              var send = (parsedURL.protocol === 'https:' ? https : http).request;\n              var signal = request.signal;\n              var response = null;\n\n              var abort = function abort() {\n                var error = new AbortError('The operation was aborted.');\n                reject(error);\n\n                if (request.body && request.body instanceof Stream.Readable) {\n                  request.body.destroy(error);\n                }\n\n                if (!response || !response.body) {\n                  return;\n                }\n\n                response.body.emit('error', error);\n              };\n\n              if (signal && signal.aborted) {\n                abort();\n                return;\n              }\n\n              var abortAndFinalize = function abortAndFinalize() {\n                abort();\n                finalize();\n              }; // Send request\n\n\n              var request_ = send(parsedURL.toString(), options);\n\n              if (signal) {\n                signal.addEventListener('abort', abortAndFinalize);\n              }\n\n              var finalize = function finalize() {\n                request_.abort();\n\n                if (signal) {\n                  signal.removeEventListener('abort', abortAndFinalize);\n                }\n              };\n\n              request_.on('error', function (error) {\n                reject(new FetchError(\"request to \".concat(request.url, \" failed, reason: \").concat(error.message), 'system', error));\n                finalize();\n              });\n              fixResponseChunkedTransferBadEnding(request_, function (error) {\n                if (response && response.body) {\n                  response.body.destroy(error);\n                }\n              });\n              /* c8 ignore next 18 */\n\n              if (process.version < 'v14') {\n                // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n                // properly handle when the socket close/end events are out of order.\n                request_.on('socket', function (s) {\n                  var endedWithEventsCount;\n                  s.prependListener('end', function () {\n                    endedWithEventsCount = s._eventsCount;\n                  });\n                  s.prependListener('close', function (hadError) {\n                    // if end happened before close but the socket didn't emit an error, do it now\n                    if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                      var error = new Error('Premature close');\n                      error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n                      response.body.emit('error', error);\n                    }\n                  });\n                });\n              }\n\n              request_.on('response', function (response_) {\n                request_.setTimeout(0);\n                var headers = fromRawHeaders(response_.rawHeaders); // HTTP fetch step 5\n\n                if (isRedirect(response_.statusCode)) {\n                  // HTTP fetch step 5.2\n                  var location = headers.get('Location'); // HTTP fetch step 5.3\n\n                  var locationURL = null;\n\n                  try {\n                    locationURL = location === null ? null : new URL(location, request.url);\n                  } catch (_unused) {\n                    // error here can only be invalid URL in Location: header\n                    // do not throw when options.redirect == manual\n                    // let the user extract the errorneous redirect URL\n                    if (request.redirect !== 'manual') {\n                      reject(new FetchError(\"uri requested responds with an invalid redirect URL: \".concat(location), 'invalid-redirect'));\n                      finalize();\n                      return;\n                    }\n                  } // HTTP fetch step 5.5\n\n\n                  switch (request.redirect) {\n                    case 'error':\n                      reject(new FetchError(\"uri requested responds with a redirect, redirect mode is set to error: \".concat(request.url), 'no-redirect'));\n                      finalize();\n                      return;\n\n                    case 'manual':\n                      // Nothing to do\n                      break;\n\n                    case 'follow':\n                      {\n                        // HTTP-redirect fetch step 2\n                        if (locationURL === null) {\n                          break;\n                        } // HTTP-redirect fetch step 5\n\n\n                        if (request.counter >= request.follow) {\n                          reject(new FetchError(\"maximum redirect reached at: \".concat(request.url), 'max-redirect'));\n                          finalize();\n                          return;\n                        } // HTTP-redirect fetch step 6 (counter increment)\n                        // Create a new Request object.\n\n\n                        var requestOptions = {\n                          headers: new Headers(request.headers),\n                          follow: request.follow,\n                          counter: request.counter + 1,\n                          agent: request.agent,\n                          compress: request.compress,\n                          method: request.method,\n                          body: clone(request),\n                          signal: request.signal,\n                          size: request.size,\n                          referrer: request.referrer,\n                          referrerPolicy: request.referrerPolicy\n                        }; // when forwarding sensitive headers like \"Authorization\",\n                        // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                        // headers will be ignored when following a redirect to a domain\n                        // that is not a subdomain match or exact match of the initial domain.\n                        // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                        // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                        // headers will also be ignored when following a redirect to a domain using\n                        // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                        // will not forward the sensitive headers\n\n                        if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                          for (var _i = 0, _arr = ['authorization', 'www-authenticate', 'cookie', 'cookie2']; _i < _arr.length; _i++) {\n                            var name = _arr[_i];\n                            requestOptions.headers.delete(name);\n                          }\n                        } // HTTP-redirect fetch step 9\n\n\n                        if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                          reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                          finalize();\n                          return;\n                        } // HTTP-redirect fetch step 11\n\n\n                        if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                          requestOptions.method = 'GET';\n                          requestOptions.body = undefined;\n                          requestOptions.headers.delete('content-length');\n                        } // HTTP-redirect fetch step 14\n\n\n                        var responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\n                        if (responseReferrerPolicy) {\n                          requestOptions.referrerPolicy = responseReferrerPolicy;\n                        } // HTTP-redirect fetch step 15\n\n\n                        resolve(fetch(new Request(locationURL, requestOptions)));\n                        finalize();\n                        return;\n                      }\n\n                    default:\n                      return reject(new TypeError(\"Redirect option '\".concat(request.redirect, \"' is not a valid value of RequestRedirect\")));\n                  }\n                } // Prepare response\n\n\n                if (signal) {\n                  response_.once('end', function () {\n                    signal.removeEventListener('abort', abortAndFinalize);\n                  });\n                }\n\n                var body = pump(response_, new PassThrough(), function (error) {\n                  if (error) {\n                    reject(error);\n                  }\n                }); // see https://github.com/nodejs/node/pull/29376\n\n                /* c8 ignore next 3 */\n\n                if (process.version < 'v12.10') {\n                  response_.on('aborted', abortAndFinalize);\n                }\n\n                var responseOptions = {\n                  url: request.url,\n                  status: response_.statusCode,\n                  statusText: response_.statusMessage,\n                  headers: headers,\n                  size: request.size,\n                  counter: request.counter,\n                  highWaterMark: request.highWaterMark\n                }; // HTTP-network fetch step 12.1.1.3\n\n                var codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings\n                // in following scenarios we ignore compression support\n                // 1. compression support is disabled\n                // 2. HEAD request\n                // 3. no Content-Encoding header\n                // 4. no content response (204)\n                // 5. content not modified response (304)\n\n                if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                  response = new Response(body, responseOptions);\n                  resolve(response);\n                  return;\n                } // For Node v6+\n                // Be less strict when decoding compressed responses, since sometimes\n                // servers send slightly invalid responses that are still accepted\n                // by common browsers.\n                // Always using Z_SYNC_FLUSH is what cURL does.\n\n\n                var zlibOptions = {\n                  flush: zlib.Z_SYNC_FLUSH,\n                  finishFlush: zlib.Z_SYNC_FLUSH\n                }; // For gzip\n\n                if (codings === 'gzip' || codings === 'x-gzip') {\n                  body = pump(body, zlib.createGunzip(zlibOptions), function (error) {\n                    if (error) {\n                      reject(error);\n                    }\n                  });\n                  response = new Response(body, responseOptions);\n                  resolve(response);\n                  return;\n                } // For deflate\n\n\n                if (codings === 'deflate' || codings === 'x-deflate') {\n                  // Handle the infamous raw deflate response from old servers\n                  // a hack for old IIS and Apache servers\n                  var raw = pump(response_, new PassThrough(), function (error) {\n                    if (error) {\n                      reject(error);\n                    }\n                  });\n                  raw.once('data', function (chunk) {\n                    // See http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                      body = pump(body, zlib.createInflate(), function (error) {\n                        if (error) {\n                          reject(error);\n                        }\n                      });\n                    } else {\n                      body = pump(body, zlib.createInflateRaw(), function (error) {\n                        if (error) {\n                          reject(error);\n                        }\n                      });\n                    }\n\n                    response = new Response(body, responseOptions);\n                    resolve(response);\n                  });\n                  raw.once('end', function () {\n                    // Some old IIS servers return zero-length OK deflate responses, so\n                    // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                    if (!response) {\n                      response = new Response(body, responseOptions);\n                      resolve(response);\n                    }\n                  });\n                  return;\n                } // For br\n\n\n                if (codings === 'br') {\n                  body = pump(body, zlib.createBrotliDecompress(), function (error) {\n                    if (error) {\n                      reject(error);\n                    }\n                  });\n                  response = new Response(body, responseOptions);\n                  resolve(response);\n                  return;\n                } // Otherwise, use response as-is\n\n\n                response = new Response(body, responseOptions);\n                resolve(response);\n              }); // eslint-disable-next-line promise/prefer-await-to-then\n\n              writeToStream(request_, request).catch(reject);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetch.apply(this, arguments);\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  var LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n  var isChunkedTransfer = false;\n  var properLastChunkReceived = false;\n  var previousChunk;\n  request.on('response', function (response) {\n    var headers = response.headers;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', function (socket) {\n    var onSocketClose = function onSocketClose() {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        var error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n\n    var onData = function onData(buf) {\n      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0; // Sometimes final 0-length chunk and end of message code are in separate packets\n\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n\n      previousChunk = buf;\n    };\n\n    socket.prependListener('close', onSocketClose);\n    socket.on('data', onData);\n    request.on('close', function () {\n      socket.removeListener('close', onSocketClose);\n      socket.removeListener('data', onData);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}