{"ast":null,"code":"/*! (c) 2020 Andrea Giammarchi */\nvar $parse = JSON.parse,\n    $stringify = JSON.stringify;\nvar keys = Object.keys;\nvar Primitive = String; // it could be Number\n\nvar primitive = 'string'; // it could be 'number'\n\nvar ignore = {};\nvar object = 'object';\n\nvar noop = function noop(_, value) {\n  return value;\n};\n\nvar primitives = function primitives(value) {\n  return value instanceof Primitive ? Primitive(value) : value;\n};\n\nvar Primitives = function Primitives(_, value) {\n  return typeof value === primitive ? new Primitive(value) : value;\n};\n\nvar revive = function revive(input, parsed, output, $) {\n  var lazy = [];\n\n  for (var ke = keys(output), length = ke.length, y = 0; y < length; y++) {\n    var k = ke[y];\n    var value = output[k];\n\n    if (value instanceof Primitive) {\n      var tmp = input[value];\n\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({\n          k: k,\n          a: [input, parsed, tmp, $]\n        });\n      } else output[k] = $.call(output, k, tmp);\n    } else if (output[k] !== ignore) output[k] = $.call(output, k, value);\n  }\n\n  for (var _length = lazy.length, i = 0; i < _length; i++) {\n    var _lazy$i = lazy[i],\n        _k = _lazy$i.k,\n        a = _lazy$i.a;\n    output[_k] = $.call(output, _k, revive.apply(null, a));\n  }\n\n  return output;\n};\n\nvar set = function set(known, input, value) {\n  var index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport var parse = function parse(text, reviver) {\n  var input = $parse(text, Primitives).map(primitives);\n  var value = input[0];\n  var $ = reviver || noop;\n  var tmp = typeof value === object && value ? revive(input, new Set(), value, $) : value;\n  return $.call({\n    '': tmp\n  }, '', tmp);\n};\nexport var stringify = function stringify(value, replacer, space) {\n  var $ = replacer && typeof replacer === object ? function (k, v) {\n    return k === '' || -1 < replacer.indexOf(k) ? v : void 0;\n  } : replacer || noop;\n  var known = new Map();\n  var input = [];\n  var output = [];\n  var i = +set(known, input, $.call({\n    '': value\n  }, '', value));\n  var firstRun = !i;\n\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n\n  return '[' + output.join(',') + ']';\n\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n\n    var after = $.call(this, key, value);\n\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n\n    return after;\n  }\n};\nexport var toJSON = function toJSON(any) {\n  return $parse(stringify(any));\n};\nexport var fromJSON = function fromJSON(any) {\n  return parse($stringify(any));\n};","map":null,"metadata":{},"sourceType":"module"}